// "use client"

import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { ThemeProvider } from "@/components/theme-providers";
import Link from "next/link";
// import { usePathname } from "next/navigation";
// import { useState } from "react";
import { ErrorWrapper } from "./error-wrapper";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// export const metadata: Metadata = {
//   title: {
//     default: "NextJS 15 tutorial - CodingRobin",
//     template: "%s | CodingRobin",
//     absolute: "",
//   },
//   description: "Generated by create next app",
// };

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {

  // const [value, setValue] = useState("")

  const navLinks = [
    // { name: "register", href: "/register" },
    // { name: "login", href: "/login" },
    // { name: "forgotPassword", href: "/forgotPassword" },
    { name: "home", href: "/" },
    { name: "dashboard", href: "/dashboard" },
  ]

  // const pathname = usePathname()
  console.log("layout.tsx");
  

  return (
    <html lang="en">
      {/* <ThemeProvider > */}

        {/* <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}> */}
        <body >
          {/* <header className="header gap-7 p-[1.4rem] bg-[black] text-[white] text-[1.5rem] text-center">
            {
              navLinks.map((element, index) => {
                // const activeLink =
                //   pathname == element.href || (pathname.startsWith(element.href) && element.href != "/")
                return (
                  <Link
                    key={index}
                    // className={activeLink ? "font-bold" : ""}
                    href={element.href}
                  >
                    <li className="text-white">{element.name}</li>
                  </Link>
                )
              })
            }
          </header> */}
          {/* <ErrorWrapper> */}
            {children}
          {/* </ErrorWrapper> */}
          <footer className="p-[1.4rem] bg-[black] text-[white] text-[1rem] text-center">
            footer
          </footer>
        </body>
      {/* </ThemeProvider> */}

    </html>
  );
}
